name: Preview website for Pull Requests

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "pages-preview-${{ github.event.pull_request.number }}"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: web
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: npm ci --no-fund --no-audit

      - name: Build (Vite) with PR base path
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        run: |
          REPO="${{ github.event.repository.name }}"
          PR="pr-${{ github.event.pull_request.number }}"
          if [[ "$REPO" == *.github.io ]]; then
            BASE="/${PR}/"
          else
            BASE="/$REPO/${PR}/"
          fi
          echo "Using base: $BASE"
          npm run build -- --base=$BASE
          # Stage under a PR-specific subfolder so the preview lives at .../<repo>/${PR}/
          rm -rf preview
          mkdir -p preview/${PR}
          cp -R dist/* preview/${PR}/
          touch preview/.nojekyll
          cp preview/${PR}/index.html preview/${PR}/404.html

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: web/preview

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages (Preview)
        id: deployment
        uses: actions/deploy-pages@v4

  update-pr-description:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update PR description with latest CHANGELOG section
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const changelogPath = path.join(process.cwd(), 'web', 'CHANGELOG.md');
            let text = '';
            try {
              text = fs.readFileSync(changelogPath, 'utf8');
            } catch (e) {
              core.warning('CHANGELOG.md not found, skipping PR description update');
              return;
            }
            // extract topmost version section starting with "### "
            const lines = text.split('\n');
            let start = -1; let end = lines.length;
            for (let i = 0; i < lines.length; i++) {
              if (lines[i].startsWith('### ')) { start = i; break; }
            }
            if (start === -1) {
              core.warning('No version section found in CHANGELOG.md');
              return;
            }
            for (let i = start + 1; i < lines.length; i++) {
              if (lines[i].startsWith('### ')) { end = i; break; }
            }
            const section = lines.slice(start, end).join('\n').trim();
            const prNumber = context.payload.pull_request.number;
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });
            const body = pr.body || '';
            const startMarker = '<!-- changelog-preview:start -->';
            const endMarker = '<!-- changelog-preview:end -->';
            const newBlock = `${startMarker}\n\n${section}\n\n${endMarker}`;
            let newBody;
            if (body.includes(startMarker) && body.includes(endMarker)) {
              const regex = new RegExp(`${startMarker}[\\s\\S]*?${endMarker}`);
              newBody = body.replace(regex, newBlock);
            } else {
              newBody = `${body ? body + '\n\n' : ''}${newBlock}`;
            }
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              body: newBody,
            });
      - name: Comment preview URL on PR
        uses: actions/github-script@v7
        with:
          script: |
            const pageUrl = `${{ steps.deployment.outputs.page_url }}`;
            const prNum = ${{ github.event.pull_request.number }};
            const base = pageUrl.endsWith('/') ? pageUrl : pageUrl + '/';
            const previewUrl = `${base}pr-${prNum}/`;
            const pr = context.payload.pull_request;
            const body = `ðŸš€ Preview deployed: ${previewUrl}`;
            // Upsert a comment tagged with a hidden marker so updates replace previous
            const marker = '<!-- preview-url-comment -->';
            const list = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
            });
            const existing = list.data.find(c => c.body && c.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body: `${marker}\n${body}`,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `${marker}\n${body}`,
              });
            }


