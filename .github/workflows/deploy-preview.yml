name: Preview website for Pull Requests

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "pages-preview-${{ github.event.pull_request.number }}"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/web
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.14.0
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies (pnpm)
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Debug build artifacts
        run: |
          echo "Workspace: $GITHUB_WORKSPACE"
          ls -la
          echo "--- apps/web dist contents ---"
          ls -la dist || true

      - name: Build (Vite) with PR base path
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        run: |
          REPO="${{ github.event.repository.name }}"
          PR="pr-${{ github.event.pull_request.number }}"
          if [[ "$REPO" == *.github.io ]]; then
            BASE="/${PR}/"
          else
            BASE="/$REPO/${PR}/"
          fi
          echo "Using base: $BASE"
          pnpm run build -- --base=$BASE

          # Verify dist exists
          test -d dist && test -f dist/index.html || { echo "dist/ missing or empty"; exit 1; }

          # Stage under a PR-specific subfolder so the preview lives at .../<repo>/${PR}/
          rm -rf preview
          mkdir -p preview/${PR}
          cp -R dist/* preview/${PR}/
          # SPA support
          touch preview/.nojekyll
          cp preview/${PR}/index.html preview/${PR}/404.html
          # Helpful root index to avoid a blank page at artifact root
          cat > preview/index.html <<EOF
          <!doctype html>
          <meta charset="utf-8"/>
          <meta name="viewport" content="width=device-width, initial-scale=1"/>
          <title>Preview Index</title>
          <body style="font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial; padding: 2rem;">
          <h1>Preview for ${PR}</h1>
          <p><a href="${PR}/">Open ${PR}</a></p>
          </body>
          EOF

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: apps/web/preview

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages (Preview)
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Comment preview URL on PR
        uses: actions/github-script@v7
        with:
          script: |
            const pageUrl = `${{ steps.deployment.outputs.page_url }}`;
            const prNum = ${{ github.event.pull_request.number }};
            const base = pageUrl.endsWith('/') ? pageUrl : pageUrl + '/';
            const previewUrl = `${base}pr-${prNum}/`;
            const pr = context.payload.pull_request;
            const body = `ðŸš€ Preview deployed: ${previewUrl}`;
            // Upsert a comment tagged with a hidden marker so updates replace previous
            const marker = '<!-- preview-url-comment -->';
            const list = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
            });
            const existing = list.data.find(c => c.body && c.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body: `${marker}\n${body}`,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `${marker}\n${body}`,
              });
            }
